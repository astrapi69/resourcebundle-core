/*
 * This file was generated by the Gradle "init" task.
 */

plugins {
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "java"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "0.27.0"
//    id "com.github.hierynomus.license" version "0.15.0"
}

group = "de.alpharogroup"
version = "3.2-SNAPSHOT"
description = "resourcebundle-core"
sourceCompatibility = "1.8"


repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

ext {
    lombokVersion = "1.18.10"
    commonsIoVersion = "2.6"
    meanbeanVersion = "2.0.3"
    testngVersion = "7.0.0"
    junitVersion = "4.12"
    mockitoCoreVersion = "3.1.0"
    fileWorkerVersion = "5.2"
    jcommonsLangVersion = "5.2.2"
    testObjectsVersion = "5.2"
    sillyCollectionsVersion = "5.4"
    xmlExtensionsVersion = "6.2.1"
    jobjCoreVersion = "3.3"
    jobjContractVerifierVersion = "3.2"
    jobjectCloneVersion = "3.1.2"
    randomizerVersion = "6.3"
    commonsCodecVersion = "1.13"
    bouncycastleVersion = "1.64"
}

dependencies {
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.yaml:snakeyaml:1.25"
    compile "com.neovisionaries:nv-i18n:1.27"
    compile "de.alpharogroup:jobj-core:3.3"
    compile "de.alpharogroup:silly-beans:1"
    compile "de.alpharogroup:silly-io:1.1"
    compile "de.alpharogroup:silly-collections:5.4"
    compile "de.alpharogroup:jobject-clone:3.1.2"
    compile "de.alpharogroup:file-worker:5.2"
    testCompile "de.alpharogroup:test-objects:5.2"
    testCompile "de.alpharogroup:meanbean-factories:1.1.1"
    testCompile "de.alpharogroup:jobj-contract-verifier:3.2"
    testCompile "org.meanbean:meanbean:2.0.3"
    testCompile "org.testng:testng:7.0.0"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.28.2"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.name}"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "${rootProject.name}"
                description = "The resourcebundle-core project can inspect projects of unused properties keys or duplicate keys"
                url = "https://github.com/astrapi69/"+"${rootProject.name}"
                organization {
                    name = "Alpha Ro Group UG (haftungsbeschr√§ngt)"
                    url = "http://www.alpharogroup.de/"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/astrapi69/"+"${rootProject.name}"+"/issues"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    developerConnection = "scm:git:git@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    url = "git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useTestNG()
}
